// <auto-generated />
using System;
using Crud.Infrastruture.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crud.Infrastruture.Migrations
{
    [DbContext(typeof(CrudContext))]
    [Migration("20210607051034_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crud.ApplicationCore.Entity.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Name = "Master"
                        },
                        new
                        {
                            Name = "ADM"
                        });
                });

            modelBuilder.Entity("Crud.ApplicationCore.Entity.UserRole", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleName", "UserEmail");

                    b.HasIndex("UserEmail");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleName = "Master",
                            UserEmail = "master.tecnico@gmail.com"
                        });
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Condutor", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CNH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPF");

                    b.ToTable("Condutores");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("dataDenascimento")
                        .HasColumnType("datetime2");

                    b.HasKey("Email");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Email = "master.tecnico@gmail.com",
                            Nome = "Master",
                            PasswordHash = "pvZ2UDVoS7aQD+Hx+Z9uuJBEXKJjKt/2aBI7cT6a6v0=",
                            Sobrenome = "tecnico",
                            dataDenascimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Veiculo", b =>
                {
                    b.Property<string>("Placa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AnoDeFabricação")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Placa");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.VeiculoCondutores", b =>
                {
                    b.Property<string>("VeiculoPlaca")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CondutorCpf")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataVenda")
                        .HasColumnType("datetime2");

                    b.HasKey("VeiculoPlaca", "CondutorCpf");

                    b.HasIndex("CondutorCpf");

                    b.ToTable("VeiculoCondutores");
                });

            modelBuilder.Entity("Crud.ApplicationCore.Entity.UserRole", b =>
                {
                    b.HasOne("Crud.ApplicationCore.Entity.Role", "Role")
                        .WithMany("Usuarios")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.DTOS.Entity.Usuario", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.VeiculoCondutores", b =>
                {
                    b.HasOne("Crud.DTOS.Entity.Condutor", "Condutor")
                        .WithMany("HistoricoVeiculo")
                        .HasForeignKey("CondutorCpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.DTOS.Entity.Veiculo", "Veiculo")
                        .WithMany("HistoricoVeiculo")
                        .HasForeignKey("VeiculoPlaca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condutor");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Crud.ApplicationCore.Entity.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Condutor", b =>
                {
                    b.Navigation("HistoricoVeiculo");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Usuario", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Crud.DTOS.Entity.Veiculo", b =>
                {
                    b.Navigation("HistoricoVeiculo");
                });
#pragma warning restore 612, 618
        }
    }
}
